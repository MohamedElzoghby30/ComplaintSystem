// <auto-generated />
using System;
using EasyComplaint.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyComplaint.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250322235458_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyComplaint.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplaintID")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintID");

                    b.HasIndex("UploadedBy");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ComplaintID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintID");

                    b.HasIndex("ParticipantID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignedToID")
                        .HasColumnType("int");

                    b.Property<int>("ComplaintTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentStepID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToID");

                    b.HasIndex("ComplaintTypeID");

                    b.HasIndex("CurrentStepID");

                    b.HasIndex("UserID");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.ComplaintParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComplaintID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintID");

                    b.HasIndex("UserID");

                    b.HasIndex("WorkflowID");

                    b.ToTable("ComplaintParticipants");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.ComplaintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.ToTable("ComplaintTypes");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplaintTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("NextStepID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintTypeID");

                    b.HasIndex("NextStepID");

                    b.HasIndex("RoleID");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Attachment", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.Complaint", "Complaint")
                        .WithMany("Attachments")
                        .HasForeignKey("ComplaintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Comment", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.Complaint", "Complaint")
                        .WithMany("Comments")
                        .HasForeignKey("ComplaintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.ComplaintParticipant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Complaint", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.User", "AssignedTo")
                        .WithMany("AssignedComplaints")
                        .HasForeignKey("AssignedToID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyComplaint.Core.Entities.ComplaintType", "ComplaintType")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplaintTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.Workflow", "CurrentStep")
                        .WithMany("Complaints")
                        .HasForeignKey("CurrentStepID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EasyComplaint.Core.Entities.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedTo");

                    b.Navigation("ComplaintType");

                    b.Navigation("CurrentStep");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.ComplaintParticipant", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.Complaint", "Complaint")
                        .WithMany("Participants")
                        .HasForeignKey("ComplaintID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complaint");

                    b.Navigation("User");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.ComplaintType", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.Department", "Department")
                        .WithMany("ComplaintTypes")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.User", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Workflow", b =>
                {
                    b.HasOne("EasyComplaint.Core.Entities.ComplaintType", "ComplaintType")
                        .WithMany()
                        .HasForeignKey("ComplaintTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyComplaint.Core.Entities.Workflow", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyComplaint.Core.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplaintType");

                    b.Navigation("NextStep");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Complaint", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.ComplaintType", b =>
                {
                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Department", b =>
                {
                    b.Navigation("ComplaintTypes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.User", b =>
                {
                    b.Navigation("AssignedComplaints");

                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("EasyComplaint.Core.Entities.Workflow", b =>
                {
                    b.Navigation("Complaints");
                });
#pragma warning restore 612, 618
        }
    }
}
